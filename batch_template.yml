AWSTemplateFormatVersion: 2010-09-09
Description: >-
  A bare bones AWS Batch environment used to test the AWSBatchManager from AWSClusterManagers.jl.

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html#aws-specific-parameter-types
Parameters:
  VPCCidrBlock:
    # https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html#VPC_Sizing
    Description: >-
      The IP address range used for batch instances in the VPC.
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
  SubnetType:
    Description: Specify the use of a private or public subnet
    Type: String
    Default: private
    AllowedValues:
      - private
      - public
  ExternalNetworking:
    Description: Specify how external networking is setup within private subnets
    Type: String
    Default: nat
    AllowedValues:
      - none
      - nat
  ProvisioningModel:
    Description: Spot instances are cheaper than on-demand but can be abruptly terminated
    Type: String
    Default: on-demand
    AllowedValues:
      - on-demand
      - spot
  MinVCPUs:
    Description: >-
      The minimum number of VCPUs to be available. Setting to 1 or higher makes jobs start
      faster but will cost us more when instances are idle. Note you cannot decrease the
      minimum number of VCPUs with a stack update.
    Type: Number
    Default: 0
  MaxVCPUs:
    Description: >-
      The maximum number of VCPUs. Typically this number does not need to be touched
    Type: Number
    Default: 256

Conditions:
  UsePublicSubnet: !Equals [!Ref SubnetType, public]
  UsePrivateSubnet: !Equals [!Ref SubnetType, private]
  UseNAT: !And
    - !Condition UsePrivateSubnet
    - !Equals [!Ref ExternalNetworking, nat]
  UseExternalNetworking: !Or
    - !Condition UsePublicSubnet
    - !Condition UseNAT
  OnDemandComputeEnvironment: !Equals [!Ref ProvisioningModel, on-demand]

Resources:
  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      # Make the ComputeEnvironment name unique for every conditional variation
      ComputeEnvironmentName: !Sub
        - "${AWS::StackName}-${InstanceType}-${SubnetType}"
        - InstanceType: !If [OnDemandComputeEnvironment, demand, spot]
          SubnetType: private
      ComputeResources:
        Type: !If [OnDemandComputeEnvironment, EC2, SPOT]
        BidPercentage: 100
        MinvCpus: !Ref MinVCPUs
        MaxvCpus: !Ref MaxVCPUs
        InstanceTypes: [optimal]
        PlacementGroup: !Ref PlacementGroup
        Subnets:
          !If
            - UsePrivateSubnet
            - - !Ref PrivateSubnetA
              - !Ref PrivateSubnetB
              - !Ref PrivateSubnetC
              - !Ref PrivateSubnetD
              - !Ref PrivateSubnetE
              - !Ref PrivateSubnetF
            - - !Ref PublicSubnetA
        SecurityGroupIds: [!Ref SecurityGroup]
        InstanceRole: !Sub "arn:aws:iam::${AWS::AccountId}:instance-profile/ecsInstanceRole"
        SpotIamFleetRole: !If [OnDemandComputeEnvironment, !Ref "AWS::NoValue", !Ref BatchSpotFleetRole]
        Tags:
          Name: !Sub "AWS Batch (${AWS::StackName})"
      ServiceRole: !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/AWSBatchServiceRole"
  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Sub ${AWS::StackName}
      Priority: 1  # Managers should have a higher priority relative to workers
      ComputeEnvironmentOrder:
        - Order: 1  # Orders are 0-based which will cause issues in Julia
          ComputeEnvironment: !Ref ComputeEnvironment

  JobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      JobDefinitionName: AWSClusterManagersDemo-Job
      ContainerProperties:
        Environment:
          - Name: WORKER_JOB_QUEUE
            Value: !Sub ${AWS::StackName}  # Does not have a GetAtt property to retrieve
        JobRoleArn: !GetAtt JLBatchJobRole.Arn
        Command:
          - julia
          - -LAWSClusterManagersDemo.jl
          - -e main()
        Memory: 1024
        Vcpus: 1
        Image: !Sub
          - "${repo}:latest"
          - repo: !ImportValue AWSClusterManagersDemoRepoUri

  # http://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html
  BatchSpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: spotfleet.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group for instances launched in the VPC by Batch
      VpcId: !Ref VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
  PlacementGroup:
    Type: AWS::EC2::PlacementGroup
    Properties:
      Strategy: partition

<<<<<<< HEAD
  # For details see: "docs/src/pages/design.md#compute-environment-networking-considerations"
=======
>>>>>>> eaa4e97 (Initial working example)
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Condition: UsePrivateSubnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Select [0, !Cidr [!GetAtt VPC.CidrBlock, 16, 12]]  # e.g. 10.0.0.0/16 becomes 10.0.0.0/20 (10.0.0.0 - 10.0.15.255)
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
  RTAPrivateSubnetA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UsePrivateSubnet
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Condition: UsePrivateSubnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: !Select [1, !Cidr [!GetAtt VPC.CidrBlock, 16, 12]]  # e.g. 10.0.0.0/16 becomes 10.0.16.0/20 (10.0.16.0 - 10.0.31.255)
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
  RTAPrivateSubnetB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UsePrivateSubnet
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Condition: UsePrivateSubnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}c
      CidrBlock: !Select [2, !Cidr [!GetAtt VPC.CidrBlock, 16, 12]]  # e.g. 10.0.0.0/16 becomes 10.0.32.0/20 (10.0.32.0 - 10.0.63.255)
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
  RTAPrivateSubnetC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UsePrivateSubnet
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetC

  PrivateSubnetD:
    Type: AWS::EC2::Subnet
    Condition: UsePrivateSubnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}d
      CidrBlock: !Select [3, !Cidr [!GetAtt VPC.CidrBlock, 16, 12]]  # e.g. 10.0.0.0/16 becomes 10.0.48.0/20 (10.0.48.0 - 10.0.63.255)
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
  RTAPrivateSubnetD:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UsePrivateSubnet
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetD

  PrivateSubnetE:
    Type: AWS::EC2::Subnet
    Condition: UsePrivateSubnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}e
      CidrBlock: !Select [4, !Cidr [!GetAtt VPC.CidrBlock, 16, 12]]  # e.g. 10.0.0.0/16 becomes 10.0.64.0/20 (10.0.64.0 - 10.0.79.255)
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
  RTAPrivateSubnetE:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UsePrivateSubnet
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetE

  PrivateSubnetF:
    Type: AWS::EC2::Subnet
    Condition: UsePrivateSubnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}f
      CidrBlock: !Select [5, !Cidr [!GetAtt VPC.CidrBlock, 16, 12]]  # e.g. 10.0.0.0/16 becomes 10.0.80.0/20 (10.0.80.0 - 10.0.95.255)
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
  RTAPrivateSubnetF:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UsePrivateSubnet
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetF

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: UsePrivateSubnet
    Properties:
      VpcId: !Ref VPC
  PrivateRoute:
    Type: AWS::EC2::Route
    Condition: UseNAT
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    Condition: UseNAT
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnetA
  EIP:
    Type: AWS::EC2::EIP
    Condition: UseNAT
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Select [6, !Cidr [!GetAtt VPC.CidrBlock, 16, 12]]  # e.g. 10.0.0.0/16 becomes 10.0.96.0/20 (10.0.96.0 - 10.0.111.255)
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
  RTAPublicSubnetA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    Condition: UseExternalNetworking
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: UseExternalNetworking
    DependsOn: PublicSubnetA  # Detaching the gateway can fail if the VPC still contains public addresses
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: UseExternalNetworking

<<<<<<< HEAD
  # Role for AWSClusterManagers.jl for managers/workers
=======
  # Role for AWSClusterManagers.jl for instances
>>>>>>> eaa4e97 (Initial working example)
  JLBatchJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com  # Note: Shouldn't be batch.amazonaws.com
            Action: sts:AssumeRole

  JLBatchPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: >-
        Allow a AWSBatchManager to spawn workers and perform introspection
      Roles:
        - !Ref JLBatchJobRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - batch:*
            Resource: '*'

  JLBatchJobIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allows Julia workers to connect to each other on any port
      GroupId: !Ref SecurityGroup
      IpProtocol: "-1"  # All protocols (TCP, UDP, ICMP) on all ports
      SourceSecurityGroupId: !Ref SecurityGroup

Outputs:
  JobDefinition:
    Value: !Ref AWS::StackName
  ComputeEnvironmentArn:
    Value: !Ref ComputeEnvironment
  JobQueueArn:
    Value: !Ref JobQueue
  JobRoleArn:
    Value: !GetAtt JLBatchJobRole.Arn
